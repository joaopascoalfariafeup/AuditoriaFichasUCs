# Ficha a avaliar - versão em português

## Unidade curricular
Programação I

## Curso responsável
Licenciatura em Engenharia Física

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
Pretende-se que os alunos:<br /> 1. Se familiarizem com a utilização de computadores pessoais com sistema operativo da família GNU/Linux;<br /> 2. Aprendam a programar na linguagem Python e a executar os programas num terminal;<br /> 3. Adquiram competência para codificar algoritmos elementares;<br /> 4. Adquiram bons hábitos de programação e de estruturação dos programas;<br /> 5. Apreendam algumas estruturas de dados e algoritmos fundamentais;<br /> 6. Adquiram competências para testar e corrigir erros dos seus programas.

## Resultados de aprendizagem e competências
<p>Resultados:<br />1. Perceção do papel da programação na resolução de problemas na licenciatura.<br /> 2. Domínio dos componentes básicos de uma linguagem de programação recente.<br /> 3. Capacidade de escrever programas que permitam realizar objetivos úteis.<br /> 4. Confiança no uso da linguagem Python e da biblioteca padrão.</p>

## Programa
1. Breve introdução aos computadores<br /> 2. Variáveis, expressões, instruções<br /> 3. Fluxo num programa<br /> 4. Funções<br /> 5. Tipos de dados<br /> 6. O módulo numpy<br /> 7. Ficheiros<br /> 8. Módulos Python<br /> 9. Mais tipos de dados<br /> 10. Recursão<br /> 11. Classes e objetos<br /> 12. Exceções

## Bibliografia obrigatória
Allen B. Downey; Think Python (https://allendowney.github.io/ThinkPython/)<br>
Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers; How to Think Like a Computer Scientist, 2022 (https://readthedocs.org/projects/howtothink/downloads/pdf/latest/)<br>

## Bibliografia complementar
Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers; Learning with Python 3, 2012 (https://openbookproject.net/thinkcs/python/english3e/)<br>

## Métodos de ensino e atividades de aprendizagem
<p>Exposição teórica e análise de programas. <br />Aulas práticas para resolução de exercícios.</p>

## Software
Python 3.x<br>

## Tipo de avaliação
Avaliação distribuída com exame final

## Componentes de Ocupação
- Estudo autónomo: 106.0 horas
- Frequência das aulas: 56.0 horas
- Total:: 162.0 horas

## Fórmula de cálculo da classificação final
<p>20% Média da componente teórica dos testes com correção automática (submetidos nas aulas práticas)<br />20% Média da componente prática dos testes com correção automática (submetidos nas aulas práticas)<br />60% Nota do exame final<br />(Classificação mínima no exame final: 50%)</p>

## Obtenção de frequência
<p>Frequência obrigatória às aulas práticas (conforme o regulamento da Universidade do Porto).<br /><br />Condições adicionais: <br />- Ter efetuado com sucesso pelo menos metade dos testes efetuados nas aulas (com correção automática) tanto nas componentes teórica como prática.</p>

## Melhoria de classificação
Exame (com peso de 100% na nota).



# Ficha a avaliar - versão em inglês

## Unidade curricular
Programming I

## Curso responsável
Bachelor in Engineering Physics

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<p>In this course the students will:<br /> 1. Get acquainted with personal computers in the GNU/Linux operating system and their usage;<br /> 2. Learn how to write computer programs using Python and execute them in a terminal.<br /> 3. Acquire competence in the implementation of simple algorithms;<br /> 4. Acquire good code structuring and programming style;<br /> 5. Learn some basic data structures and algorithms;<br /> 6. Get acquainted with program debugging and testing.</p>

## Resultados de aprendizagem e competências
Outcomes:<br />1. Understanding the role of programming for solving problems in the degree.<br /> 2. Acquaintance with the basic components of a recent programming language.<br /> 3. Ability to write programs that allow accomplishing useful goals.<br /> 4. Confidence in the usage of the Python language and its standard library.

## Programa
<p>1. A short introduction to computers<br /> 2. Variables, expressions and statements<br /> 3. Program Flow<br /> 4. Functions<br /> 5. Data Types<br /> 6. Numpy<br /> 7. Files<br /> 8. Modules<br /> 9. More datatypes<br /> 10. Recursion<br /> 11. Classes and Objects<br /> 12. Exceptions</p>

## Bibliografia obrigatória
Allen B. Downey; Think Python<br>
Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers; How to Think Like a Computer Scientist, 2022<br>

## Bibliografia complementar
Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers; Learning with Python 3, 2012<br>

## Métodos de ensino e atividades de aprendizagem
<p>Lectures; program analysis.<br />Practical, programming classes.</p>

## Software
Python 3.x<br>

## Tipo de avaliação
Distributed evaluation with final exam

## Componentes de Ocupação
- Estudo autónomo: 106.0 hours
- Frequência das aulas: 56.0 hours
- Total:: 162.0 hours

## Fórmula de cálculo da classificação final
20% Average mark of the theoretical component of exercises submitted in practical classes<br />20% Average mark of the practical component of exercises submitted in practical classes<br />60% Final exam grade<br />(Minimum grade at the final exam: 50%)

## Obtenção de frequência
<p>Frequency of practical classes, according to the rules of the University. <br /><br />Additional conditions:<br />- Having successfully completed at least half of the proposed problems in class (with automatic correction) both in the theoretical and in the practical components.</p>

## Melhoria de classificação
Exam (with weight 100% on the grade)

