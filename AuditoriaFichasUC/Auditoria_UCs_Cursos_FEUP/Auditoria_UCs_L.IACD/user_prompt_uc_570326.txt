# Ficha a avaliar - versão em português

## Unidade curricular
Desenho e Análise de Algoritmos

## Curso responsável
Licenciatura em Ciência de Computadores

## Créditos ECTS
6

## Ano
3

## Semestre
2

## Objetivos
<p>Aprendizagem de técnicas de concepção e análise de algoritmos eficientes.</p>

## Resultados de aprendizagem e competências
<p>Enriquecimento do conhecimento sobre modelos genéricos para alguns tipos de problemas e sobre técnicas algorítmicas a eles associadas. Experiência prática na aplicação de algoritmos genéricos a problemas concretos. Competência na análise da complexidade assintótica de algoritmos.<br /><br /></p>

## Pré-requisitos e co-requisitos
<p>Conhecimentos de programação (C/C++ ou JAVA), de algoritmos básicos (de contagem, pesquisa e de ordenação) e de algumas estruturas de dados. O estudante deve preferencialmente ter já aprovação à unidade curricular de  "Programação Imperativa" (CC1003) e a  "Estruturas de Dados" (CC1007), ou a unidades curriculares equivalentes.  <br /><br /><br /></p>

## Programa
<p>Análise assintótica de algoritmos: Notação <em>Big O</em> (O, &#937; e &#920;), estimativas de tempo de execução, análise de programas iterativos e recursivos;<br /><br />Ordenação: ordenação como peça básica de outros algoritmos, algoritmos comparativos e não comparativos, pesquisa binária e aplicações diretas e indiretas;<br /><br />Técnicas de desenho de algoritmos: pesquisa exaustiva, algoritmos ávidos (<em>greedy</em>), divisão-e-conquista, programação dinâmica;<br /><br />Algumas estruturas de dados especializadas: filas de prioridade, conjuntos disjuntos;<br /><br />Árvores binárias de pesquisa balanceadas: árvores Red-Black.<br /><br />Algoritmos de grafos: representação de grafos, pesquisas em profundidade e largura, árvore de suporte de custo mínimo, distâncias mínimas, fluxo máximo.<br /><br />Problemas computacionalmente difíceis. Breve introdução às classes de complexidade de problemas P, NP, NP-hard e NP-Completos. Introdução aos algoritmos de aproximação e paramétricos.<br /><br /></p>

## Bibliografia obrigatória
Thomas H. Cormen; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009508760108801" title="Introduction to algorithms (Abre numa nova janela)" target="_blank" >Introduction to algorithms</a>. ISBN: 978-0-262-36750-9 (T.H.Cormen, C.E. Leiserson, R.L.Rivest, C.Stein. Introduction to Algorithms. The MIT Press, 4th ed, 2022)<br>
Cormen Thomas H. 070; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990002896400108801" title="Introduction to algorithms (Abre numa nova janela)" target="_blank" >Introduction to algorithms</a>. ISBN: 9780262033848 hbk (T.H.Cormen, C.E. Leiserson, R.L.Rivest, C.Stein. Introduction to Algorithms. The MIT Press, 3rd ed, 2009)<br>
J. Kleinberg, E. Tardos; Algorithm Design, Addison-Wesley, 2005. ISBN: 978-0321295354 (slides disponíveis em http://www.cs.princeton.edu/~wayne/kleinberg-tardos/)<br>

## Bibliografia complementar
R. Sedgewick and K. Wayne; Algorithms, 4th Edition, Addison-Wesley, 2011. ISBN: 978-0321573513 (material auxiliar disponível em http://algs4.cs.princeton.edu/)<br>
Skiena Steven S.; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990002874110108801" title="The algorithm design manual (Abre numa nova janela)" target="_blank" >The algorithm design manual</a>. ISBN: 978-1-84800-069-8 (S. Skiena. The Algorithm Design Manual, 2nd Edition, 2008)<br>
Michael R. Garey; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990001880050108801" title="Computers and intractability (Abre numa nova janela)" target="_blank" >Computers and intractability</a>. ISBN: 0-7167-1045-5 <br>

## Métodos de ensino e atividades de aprendizagem
<p>Aulas teóricas para exposição da matéria acompanhada da discussão de alguns exemplos. Aulas práticas laboratoriais para resolução de folhas de exercícios e de problemas em computador com avaliação e <em>feedback</em> automatizado pelo sistema Mooshak.</p>

## Software
Linguagens de programação/Programming Languages: C, C++ or Java<br>
Servidor Mooshak para CC2001 (http://mooshak.dcc.fc.up.pt/~daa)<br>

## Tipo de avaliação
Avaliação distribuída com exame final

## Componentes de Ocupação
- Estudo autónomo: 72.0 horas
- Frequência das aulas: 48.0 horas
- Trabalho laboratorial: 42.0 horas
- Total:: 162.0 horas

## Fórmula de cálculo da classificação final
<ul><br /><li><strong>NP (5 valores): </strong>obtida através de <strong>dois</strong> testes práticos (2.5 valores cada).</li><br /><li><strong>Ex (15 valores):</strong> nota teórica, vale 75% da nota final.</li><br /><li>Nota Final (requer Ex &gt;= 8.0 em 20) calculdada por  NF = Ex * 0.75 + NP &gt;= 9.5</li><br /><li><strong>Casos de fraude académica: será aplicado o regulamento em vigor na FCUP/Universidade do Porto.</strong></li><br /></ul>

## Obtenção de frequência
<p>Serão registadas as presenças às aulas práticas. Perde a frequência por falta de assiduidade o estudante que faltar a mais de 25% das aulas práticas previstas (o que implica não ter possibilidade de obter aprovação à UC em 2025/2026). O número máximo de faltas às aulas práticas é de <strong>três.</strong></p>

## Exames ou Trabalhos Especiais
<p>Serão realizados dois testes de programação com classificação de <strong> 5 valores</strong> (em 20) na nota final (ou seja 25%). Os testes terão avaliação automática pelo sistema Mooshak . Os problemas a resolver nos testes estarão relacionados com os propostos nas aulas práticas e para trabalho extra-aula. <strong> A classificação nos testes práticos não pode ser melhorada. </strong></p>

## Melhoria de classificação
<p>Para estudantes com primeira inscrição na UC em 2025/2026, apenas a nota do exame pode ser melhorada.<br /><br />Os estudantes aprovados em 2024/2025 que pretendam efetuar melhoria de classificação, devem realizar os testes práticos em 2025/2026. A nota dos testes práticos de 2024/2025 (TP) pode ser usada <strong>se a nota do 2º teste prático nesse ano for maior ou igual a 1.5</strong> (em 3). A classificação final é dada por  0,75*Ex + 5/6*TP, em que TP é a nota obtida nesses  testes.<br />As mesmas regras aplicam-se aos estudantes não aprovados em 2024/2025.<br /><br />Para realizarem os testes práticos, devem informar a regente no<strong> início do</strong> <strong>semestre. </strong></p>



# Ficha a avaliar - versão em inglês

## Unidade curricular
Algorithm Design and Analysis

## Curso responsável
Bachelor in Computer Science

## Créditos ECTS
6

## Ano
3

## Semestre
2

## Objetivos
<p>To learn techniques for designing and analyzing algorithms.</p>

## Resultados de aprendizagem e competências
<p>Improving background on generic models of common problems and the algorithmic techniques for solving them. Practical experience in applying generic algorithms to specific problems. Competence in the asymptotic analysis of the running time of algorithms.</p>

## Pré-requisitos e co-requisitos
<p>Students should know simple algorithms and data structures (for counting, searching and sorting) and a programming language (C/C++ or JAVA).</p>
<p>Prerequisites: "Imperative Programming" (CC1003) and  "Data Structures"(CC1007), or some course unit with equivalent content.</p>
<p> </p>

## Programa
<p>Asymptotic analysis of algorithms: Big O notation (O, &#937; e &#920;), estimating execution time, analyzing iterative and recursive programs;<br /><br />Sorting: sorting as basic element of other algorithms; comparative and non comparative algorithms, binary search and direct and indirect applications;<br /><br />Algorithm design techniques: exhaustive search, greedy algorithms, divide and conquer, dynamic programming;</p>
<p>Some specialized data structures: priority queues, disjoint sets;<br /><br />Balanced Binary Search Trees: Red-Black trees;<br /><br />Graph algorithms: graph representation, depth-first search, breadth-first search, minimum spanning trees, minimum distances, maximum flow.<br /><br />Computtaionally hard problems. Brief introduction to the complexity classes P, NP, NP-hard, NP-complete for decision problems. Introduction to approximation and parameterized algorithms.</p>

## Bibliografia obrigatória
Thomas H. Cormen; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009508760108801" title="Introduction to algorithms (Opens in a new window)" target="_blank" >Introduction to algorithms</a>. ISBN: 978-0-262-36750-9 (T.H.Cormen, C.E. Leiserson, R.L.Rivest, C.Stein. Introduction to Algorithms. The MIT Press, 4th ed, 2022)<br>
Cormen Thomas H. 070; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990002896400108801" title="Introduction to algorithms (Opens in a new window)" target="_blank" >Introduction to algorithms</a>. ISBN: 9780262033848 hbk<br>
J. Kleinberg, E. Tardos; Algorithm Design, Addison-Wesley, 2005. ISBN: 978-0321295354<br>

## Bibliografia complementar
R. Sedgewick and K. Wayne; Algorithms, 4th Edition, Addison-Wesley, 2011. ISBN: 978-0321573513<br>
Skiena Steven S.; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990002874110108801" title="The algorithm design manual (Opens in a new window)" target="_blank" >The algorithm design manual</a>. ISBN: 978-1-84800-069-8<br>
Michael R. Garey; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990001880050108801" title="Computers and intractability (Opens in a new window)" target="_blank" >Computers and intractability</a>. ISBN: 0-7167-1045-5 <br>

## Métodos de ensino e atividades de aprendizagem
<p>Regular lectures for exposing the program topics and discussing examples. Laboratory classes for solving exercise sheets and programming problems for implementation, with automatic feedback and evaluation by the Mooshak system.<br /><br /></p>

## Software
Linguagens de programação/Programming Languages: C, C++ or Java<br>
Servidor Mooshak para CC2001 (http://mooshak.dcc.fc.up.pt/~daa)<br>

## Tipo de avaliação
Distributed evaluation with final exam

## Componentes de Ocupação
- Estudo autónomo: 72.0 hours
- Frequência das aulas: 48.0 hours
- Trabalho laboratorial: 42.0 hours
- Total:: 162.0 hours

## Fórmula de cálculo da classificação final
<ul><br /><li style=&quot;text-align: left;&quot;><strong>NP (5 points)</strong>: 2 practical tests (2.5 points each).</li><br /><li style=&quot;text-align: left;&quot;><strong>Ex (15 points):</strong> theoretical grade, worth 75% of the final grade.</li><br /><li style=&quot;text-align: left;&quot;>Final Grade  (requires Ex &gt;= 8.0 in 20.0) and </li><br /></ul><br />               NF = Ex * 0.75 + NP &gt;= 9.5<br /><br /><ul><br /><li><strong style=&quot;font-size: 11px;&quot;>Academic integrity violations</strong><span style=&quot;font-size: 11px;&quot;>: the regulations from FCUP/University of Porto will be applied.</span></li><br /></ul>

## Obtenção de frequência
<p>Students must attend at least 75% of the pratical classes to be admitted to the exams. Students who miss more than<strong> three </strong>classes cannot attend the exams. </p>

## Exames ou Trabalhos Especiais
<p>Two programming tests will be carried out, that worth <strong>5 points</strong> (out of 20) towards the final grade (i.e. 25%). The tests will be evaluated automatically by the Mooshak system. The problems to be solved in the tests will be related to those proposed in the practical classes and for extracurricular work. <strong>The score for these practical tests cannot be improved.</strong></p>

## Melhoria de classificação
<p>For students enrolled in the course for the first time in 2025/2026, only the score in the exam can be improved.<br /><br />Students approved in 2024/2025, who wish to improve their grade, must take the practical tests in 2025/2026. The score obtained in the practical tests in 2024/2025 can replace that one <strong>if the score in the 2nd test was greater than or equal to 1.5 </strong>(out of 3).  The grade will be given by 0.75*Ex + 5/6*TP, where TP is the score in the practical tests in 2024/2025.<br />The same rules apply to students not approved in 2024/2025.<br /><br />To carry out the pratical tests, students must contact the lecturer in the <strong>beggining of the semester</strong>.</p>

