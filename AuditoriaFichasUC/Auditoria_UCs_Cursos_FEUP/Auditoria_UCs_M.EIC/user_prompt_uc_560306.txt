# Ficha a avaliar - versão em português

## Unidade curricular
Teste, Verificação e Validação de Software

## Curso responsável
Mestrado em Engenharia Informática e Computação

## Créditos ECTS
6

## Ano
2

## Semestre
1

## Objetivos
<span style=&quot;font-weight: 400;&quot;>O objetivo desta unidade curricular é: a familiarização com a terminologia usada em testes de software; a sensibilização com as questões relacionadas com a qualidade de software; e exploração e prática de diferentes técnicas de Verificação e Validação (V&amp;V) necessárias para a construção de sistemas de software de qualidade.</span>

## Resultados de aprendizagem e competências
No final da Unidade curricular os estudantes devem ser capazes de projetar e executar um plano de Verificação e Validação (V&amp;V). Mais especificamente, espera-se que os estudantes sejam capazes de:<br />- Planear uma estratégia de Verificação e Validação.<br />- Selecionar as melhores técnicas e ferramentas de teste de software para um determinado contexto.<br />- Projetar e desenvolver testes em diferentes níveis (e.g., unidade, integração, sistema e aceitação).<br />- Testar situações excepcionais (e.g., boundary value analysis).<br />- Refletir sobre as limitações e qualidade dos testes desenvolvidos.<br />- Usar métricas para avaliar a qualidade dos testes (e.g., cobertura de instruções).<br />- Escrever código de teste sustentável, evitando problemas conhecidos (e.g., flakiness, ilegível, dependente, fat testes, etc.).

## Programa
1. Introdução à Verificação e Validação de Software<br />2. Partição em classes de equivalência / &#8220;category partition&#8221; e análise de valores fronteira<br />3. Teste baseado em modelos<br />4. &#8220;Structural Testing (Line and Decision coverage)&#8221; e &#8220;Logical Coverage (Condition coverage and Modified Condition/Decision Coverage (MC/DC))&#8221;<br />5. Teste de mutação<br />6. &#8220;Test-Driven Development (TDD)&#8221;, &#8220;Behavior-Driven Development (BDD) Testing&#8221;, e &#8220;Property-Based Testing (PBT)&#8221;<br />7. Geração automática de testes utilizando abordagens aleatórias, fuzzing, e search-based<br />8. Geração automática de testes utilizando inteligência artificial<br />9. Teste de integração, teste de sistema, teste de aceitação, testes de performance, testes de segurança, e teste de regressão<br />10. Gestão e documentação de testes<br />11. Teste estático

## Bibliografia obrigatória
Maurício Aniche; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665780108801" title="Effective software testing (Abre numa nova janela)" target="_blank" >Effective software testing</a>, 2022. ISBN: 978-1-633-43993-1<br>
Paul Ammann; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990008407750108801" title="Introduction to software testing (Abre numa nova janela)" target="_blank" >Introduction to software testing</a>, 2016. ISBN: 978-1-107-17201-2<br>
Paul C. Jorgensen; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009087990108801" title="Software Testing A Craftsman's Approach (Abre numa nova janela)" target="_blank" >Software Testing A Craftsman's Approach</a>, 2013. ISBN: 978-1-466-56069-7<br>
Dorothy Graham, Rex Black, Erik van Veenendaal; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665750108801" title="Foundations of Software Testing: ISTQB Certification (Abre numa nova janela)" target="_blank" >Foundations of Software Testing: ISTQB Certification</a>, 2020. ISBN: 978-1-473-76479-8<br>
Ilene Burnstein; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990004746670108801" title="Practical Software Testing (Abre numa nova janela)" target="_blank" >Practical Software Testing</a>, 2003. ISBN: 978-0-387-95131-7<br>
Gordon Fraser and José Miguel Rojas; Software Testing, 2019. ISBN: 978-3-030-00262-6<br>
Mark Utting; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317160108801" title="Practical Model-Based Testing (Abre numa nova janela)" target="_blank" >Practical Model-Based Testing</a>, 2007. ISBN: 978-0-12-372501-1<br>
Tomek Kaczanowski; Bad Tests, Good Tests, 2013. ISBN: 978-8-393-84713-6<br>

## Bibliografia complementar
Kent Beck; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317170108801" title="Test Driven Development: By Example (Abre numa nova janela)" target="_blank" >Test Driven Development: By Example</a>, 2002. ISBN: 978-0-321-14653-3<br>
Petar Tahchiev, Felipe Leme, Vincent Massol, and Gary Gregory; JUnit 4.8 In Action, 2010. ISBN: 978-1-935-18202-3<br>
Tomek Kaczanowski; Practical Unit Testing with JUnit and Mockito, 2019. ISBN: 978-8-393-48939-8<br>
Chak Shun Yu, Christoph Treude, Maurício Aniche; Comprehending Test Code: An Empirical Study, 2019. ISBN: 978-1-7281-3095-8<br>
Michal Young and Mauro Pezzè; Software testing and analysis: process, principles, and techniques, 2008. ISBN: 978-0-471-45593-6<br>

## Métodos de ensino e atividades de aprendizagem
Esta unidade curricular promove o contínuo envolvimento dos estudantes através do estudo, discussão e aplicação prática dos temas apresentados. De forma a contribuir para uma aprendizagem contínua e autónoma, os estudantes resolvem exercícios práticos ao longo do semestre. Para além destes exercícios, os estudantes têm que realizar um projeto onde aplicam os conceitos apresentados, em particular, diferentes estratégias e ferramentas de V&amp;V.<br /><br />As <strong>aulas teóricas</strong> são usadas para exposição formal dos conceitos e aspetos fundamentais de V&amp;V. Sempre que possível, os conceitos teóricos são acompanhados da apresentação e discussão de casos práticos reais.<br /><br />As <strong>aulas teórico-práticas</strong> são usadas para realizar exercícios, aplicar técnicas de V&amp;V, usar/experimentar diversas ferramentas de auxílio à escrita e execução de testes e para apoiar na realização do projeto.

## Tipo de avaliação
Avaliação distribuída com exame final

## Componentes de Ocupação
- Estudo autónomo: 100.0 horas
- Frequência das aulas: 39.0 horas
- Trabalho laboratorial: 23.0 horas
- Total:: 162.0 horas

## Fórmula de cálculo da classificação final
A classificação final é calculada da seguinte forma: P x 40% + E x 60%<br /><br />P: projeto<br />E: exame final

## Obtenção de frequência
Para concluir com sucesso esta unidade curricular, os estudantes devem obter:<br />- nota mínima de 47,5% no projecto (P)<br />- nota mínima de 47,5% no exame final (E)

## Melhoria de classificação
- A classificação obtida no projeto pode ser melhorada na edição seguinte da unidade curricular.<br />- A classificação do exame pode ser melhorada em exame de recurso.



# Ficha a avaliar - versão em inglês

## Unidade curricular
Software Testing, Verification and Validation

## Curso responsável
Master in Informatics and Computing Engineering

## Créditos ECTS
6

## Ano
2

## Semestre
1

## Objetivos
<span style=&quot;font-weight: 400;&quot;>The objective of this curricular unit is: familiarization with the terminology used in software testing; raising awareness of issues related to software quality; and exploring and practicing different Verification and Validation (V&amp;V) techniques necessary for building quality software systems.</span>

## Resultados de aprendizagem e competências
At the end of the course, students should be able to design and execute a Verification and Validation (V&amp;V) plan. More specifically, students are expected to be able to:<br />- Plan a Verification and Validation strategy.<br />- Select the best software testing techniques and tools for a given context.<br />- Design and develop tests at different levels (e.g., unit, integration, system and acceptance).<br />- Test exceptional situations (e.g., boundary value analysis).<br />- Reflect on the limitations and quality of the tests developed.<br />- Use metrics to assess test quality (e.g., instruction coverage).<br />- Write maintainable test code, avoiding known issues (e.g., flakiness, unreadable, dependent, fat testing, etc.).

## Programa
1. Introduction to Software Verification and Software Validation<br />2. Equivalence Class Partitioning / Category Partition and Boundary Value Analysis<br />3. Model-based Testing<br />4. Structural Testing (Line and Decision coverage) and Logical Coverage (Condition coverage and Modified Condition/Decision Coverage (MC/DC))<br />5. Mutation Testing<br />6. Test-Driven Development (TDD), Behavior-Driven Development (BDD) Testing, e Property-Based Testing (PBT)<br />7. Automatic test case generation with random, fuzzing, and search-based approaches<br />8. Automatic test case generation with artificial intelligence<br />9. Integration Testing, System Testing, Acceptance Testing, Performance Testing, Security Testing, and Regression Testing<br />10. Test management and documentation<br />11. Static Testing

## Bibliografia obrigatória
Maurício Aniche; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665780108801" title="Effective software testing (Opens in a new window)" target="_blank" >Effective software testing</a>, 2022. ISBN: 978-1-633-43993-1<br>
Paul Ammann; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990008407750108801" title="Introduction to software testing (Opens in a new window)" target="_blank" >Introduction to software testing</a>, 2016. ISBN: 978-1-107-17201-2<br>
Paul C. Jorgensen; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009087990108801" title="Software Testing A Craftsman's Approach (Opens in a new window)" target="_blank" >Software Testing A Craftsman's Approach</a>, 2013. ISBN: 978-1-466-56069-7<br>
Dorothy Graham, Rex Black, Erik van Veenendaal; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665750108801" title="Foundations of Software Testing: ISTQB Certification (Opens in a new window)" target="_blank" >Foundations of Software Testing: ISTQB Certification</a>, 2020. ISBN: 978-1-473-76479-8<br>
Ilene Burnstein; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990004746670108801" title="Practical Software Testing (Opens in a new window)" target="_blank" >Practical Software Testing</a>, 2003. ISBN: 978-0-387-95131-7<br>
Gordon Fraser and José Miguel Rojas; Software Testing, 2019. ISBN: 978-3-030-00262-6<br>
Mark Utting; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317160108801" title="Practical Model-Based Testing (Opens in a new window)" target="_blank" >Practical Model-Based Testing</a>, 2007. ISBN: 978-0-12-372501-1<br>
Tomek Kaczanowski; Bad Tests, Good Tests, 2013. ISBN: 978-8-393-84713-6<br>

## Bibliografia complementar
Kent Beck; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317170108801" title="Test Driven Development: By Example (Opens in a new window)" target="_blank" >Test Driven Development: By Example</a>, 2002. ISBN: 978-0-321-14653-3<br>
Petar Tahchiev, Felipe Leme, Vincent Massol, and Gary Gregory; JUnit 4.8 In Action, 2010. ISBN: 978-1-935-18202-3<br>
Tomek Kaczanowski; Practical Unit Testing with JUnit and Mockito, 2019. ISBN: 978-8-393-48939-8<br>
Chak Shun Yu, Christoph Treude, Maurício Aniche; Comprehending Test Code: An Empirical Study, 2019. ISBN: 978-1-7281-3095-8<br>
Michal Young and Mauro Pezzè; Software testing and analysis: process, principles, and techniques, 2008. ISBN: 978-0-471-45593-6<br>

## Métodos de ensino e atividades de aprendizagem
This curricular unit promotes the continuous involvement of students through the study, discussion and practical application of the topics presented. In order to contribute to continuous and autonomous learning, students carry out assignments throughout the semester. In addition to these assignments, students have to carry out a project where they apply the concepts presented, in particular, different V&amp;V strategies and tools.<br /><br /><strong>Theoretical classes</strong> are used to formally explain the concepts and fundamental aspects of V&amp;V. Whenever possible, theoretical concepts are accompanied by the presentation and discussion of real practical cases.<br /><br /><strong>Theoretical-practical classes</strong> are used to carry out exercises, apply V&amp;V techniques, use/experiment various testing tools and to support the implementation of the final project.

## Tipo de avaliação
Distributed evaluation with final exam

## Componentes de Ocupação
- Estudo autónomo: 100.0 hours
- Frequência das aulas: 39.0 hours
- Trabalho laboratorial: 23.0 hours
- Total:: 162.0 hours

## Fórmula de cálculo da classificação final
The final ranking is calculated as follows: P x 40% + E x 60%<br /><br />P: project<br />E: final exam

## Obtenção de frequência
To successfully complete this curricular unit, students must obtain:<br />- minimum grade of 47.5% in the project (P)<br />- minimum grade of 47.5% in the final exam (E)

## Melhoria de classificação
- The classification of the final project can be improved in the next edition of the course.<br />- The classification of the final exam can be improved in the appeal exam.

