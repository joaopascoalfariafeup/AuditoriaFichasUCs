# Ficha a avaliar - versão em português

## Unidade curricular
Teste, Verificação e Validação de Software

## Curso responsável
Mestrado em Engenharia de Software

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<span style=&quot;font-weight: 400;&quot;>O objetivo desta unidade curricular é: a familiarização com a terminologia usada em testes de software; a sensibilização com as questões relacionadas com a qualidade de software; e exploração e prática de diferentes técnicas de Verificação e Validação (V&amp;V) necessárias para a construção de sistemas de software de qualidade.</span>

## Resultados de aprendizagem e competências
<p><span style="font-weight: 400;">No final da Unidade curricular, os estudantes devem ser capazes de projetar e executar um plano de Verificação e Validação (V&amp;V). Mais especificamente, espera-se que os estudantes sejam capazes de:</span></p>
<p><span style="font-weight: 400;">- Planear uma estratégia de Verificação e Validação.</span></p>
<p><span style="font-weight: 400;">- Selecionar as melhores técnicas e ferramentas de teste de software para um determinado contexto.</span></p>
<p><span style="font-weight: 400;">- Projetar e desenvolver testes ao nível da unidade.</span></p>
<p><span style="font-weight: 400;">- Testar situações excepcionais (ex., boundary value analysis).</span></p>
<p><span style="font-weight: 400;">- Refletir sobre as limitações e qualidade dos testes desenvolvidos.</span></p>
<p><span style="font-weight: 400;">- Usar métricas para avaliar a qualidade dos testes (ex., cobertura de código).</span></p>
<p><span style="font-weight: 400;">- Escrever código de teste sustentável, evitando problemas conhecidos (ex., </span><em><span style="font-weight: 400;">flakiness</span></em><span style="font-weight: 400;">, ilegível, dependente, </span><em><span style="font-weight: 400;">fat</span></em><span style="font-weight: 400;"> testes, etc.).</span></p>

## Programa
1. Introdução à Verificação e Validação de Software; &#8220;Testing pyramid&#8221;<br />2. Teste estático<br />3. Partição em classes de equivalência / &#8220;category partition&#8221; e análise de valores fronteira<br />4. Teste baseado em modelos<br />5. &#8220;Property-Based Testing (PBT)&#8221;<br />6. &#8220;Structural Testing (Line and Decision coverage)&#8221; e &#8220;Logical Coverage (Condition coverage and Modified Condition/Decision Coverage (MC/DC))&#8221;<br />7. Teste de mutação<br />8. &#8220;Test-Driven Development (TDD)&#8221;, &#8220;Behavior-Driven Development (BDD) Testing&#8221;, e &#8220;Test Smells&#8221;<br />9. Gestão e documentação de testes<br />10. Geração automática de testes utilizando abordagens aleatórias, fuzzing, e search-based

## Bibliografia obrigatória
Aditya P. Mathur; Foundations of Software Testing, 2013. ISBN: 9789332517660<br>
Maurício Aniche; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665780108801" title="Effective software testing (Abre numa nova janela)" target="_blank" >Effective software testing</a>, 2022. ISBN: 978-1-633-43993-1<br>
Paul Ammann; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990008407750108801" title="Introduction to software testing (Abre numa nova janela)" target="_blank" >Introduction to software testing</a>. ISBN: 978-1-107-17201-2 <br>
Mark Utting; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317160108801" title="Practical Model-Based Testing (Abre numa nova janela)" target="_blank" >Practical Model-Based Testing</a>, 2007. ISBN: 978-0-12-372501-1<br>

## Bibliografia complementar
Copeland, Lee.; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma9910245811208801" title="A practitioner.s guide to software test design / (Abre numa nova janela)" target="_blank" >A practitioner.s guide to software test design /</a>. ISBN: 1-58053-791-X<br>
Dorothy Graham, Rex Black, Erik van Veenendaal; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665750108801" title="Foundations of Software Testing: ISTQB Certification (Abre numa nova janela)" target="_blank" >Foundations of Software Testing: ISTQB Certification</a>, 2020. ISBN: 978-1-473-76479-8<br>

## Métodos de ensino e atividades de aprendizagem
<p><span style="font-weight: 400;">Esta unidade curricular promove o contínuo envolvimento dos estudantes através do estudo, discussão e aplicação prática dos temas apresentados. De forma a contribuir para uma aprendizagem contínua e autónoma, os estudantes resolvem exercícios práticos ao longo do semestre. Para além destes exercícios, os estudantes têm que realizar um projeto onde aplicam os conceitos apresentados, em particular, diferentes estratégias e ferramentas de V&amp;V..</span></p>
<p><span style="font-weight: 400;">As </span><strong>aulas teóricas</strong><span style="font-weight: 400;"> são usadas para exposição formal dos conceitos e aspetos fundamentais de V&amp;V. Sempre que possível, os conceitos teóricos são acompanhados da apresentação e discussão de casos práticos reais.<br /></span><br /><span style="font-weight: 400;">As </span><strong>aulas teórico-práticas</strong><span style="font-weight: 400;"> são usadas para realizar exercícios, aplicar técnicas de V&amp;V, usar/experimentar diversas ferramentas de auxílio à escrita e execução de testes e para apoiar na realização do projeto.</span></p>

## Tipo de avaliação
Avaliação distribuída com exame final

## Componentes de Ocupação
- Estudo autónomo: 100.0 horas
- Frequência das aulas: 39.0 horas
- Trabalho laboratorial: 23.0 horas
- Total:: 162.0 horas

## Fórmula de cálculo da classificação final
<p><span style="font-weight: 400;">A classificação final é calculada da seguinte forma:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;"> P x 40% + E x 60%</span></li>
</ul>
<br />
<p><span style="font-weight: 400;">P: projeto</span></p>
<p><span style="font-weight: 400;">E: exame final</span></p>

## Obtenção de frequência
<p><span style="font-weight: 400;">Para concluir com sucesso esta unidade curricular, os estudantes devem obter:</span></p>
<ul>
<li style="font-weight: 400;">nota mínima de 47,5% no projecto (P)</li>
<li style="font-weight: 400;"><span style="font-weight: 400;">nota mínima de 47,5% no exame final (E)</span></li>
</ul>

## Melhoria de classificação
- As classificações obtidas no trabalho prático / projeto podem ser melhoradas na edição seguinte da unidade curricular.<br />- A classificação do exame pode ser melhorada em exame de recurso.



# Ficha a avaliar - versão em inglês

## Unidade curricular
Software Testing Verification and Validation

## Curso responsável
Master in Software Engineering

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<span style=&quot;font-weight: 400;&quot;>The objective of this curricular unit is: familiarization with the terminology used in software testing; raising awareness of issues related to software quality; and exploring and practicing different Verification and Validation (V&amp;V) techniques necessary for building quality software systems.</span>

## Resultados de aprendizagem e competências
<p><span style="font-weight: 400;">At the end of the course, students should be able to design and execute a Verification and Validation (V&amp;V) plan. More specifically, students are expected to be able to:</span></p>
<p><span style="font-weight: 400;">- Plan a Verification and Validation strategy.</span></p>
<p><span style="font-weight: 400;">- Select the best software testing techniques and tools for a given context.</span></p>
<p><span style="font-weight: 400;">- Design and develop tests at unit level.</span></p>
<p><span style="font-weight: 400;">- Test exceptional situations (e.g., boundary value analysis).</span></p>
<p><span style="font-weight: 400;">- Reflect on the limitations and quality of the tests developed.</span></p>
<p><span style="font-weight: 400;">- Use metrics to assess test quality (e.g., code coverage).</span></p>
<p><span style="font-weight: 400;">- Write maintainable test code, avoiding known issues (e.g., flakiness, unreadable, dependent, fat testing, etc.).</span></p>

## Programa
1. Introduction to Software Verification and Software Validation; Testing pyramid<br />2. Static Testing<br />3. Equivalence Class Partitioning / Category Partition and 4. Boundary Value Analysis<br />4. Model-based Testing<br />5. Property-Based Testing (PBT)<br />6. Structural Testing (Line and Decision coverage) and Logical Coverage (Condition coverage and Modified Condition/Decision Coverage (MC/DC))<br />7. Mutation Testing<br />8. Test-Driven Development (TDD), Behavior-Driven Development (BDD) Testing, and &#8220;Test Smells&#8221;<br />9. Test management and documentation<br />10. Automatic test case generation with random, fuzzing, and search-based approaches

## Bibliografia obrigatória
Aditya P. Mathur; Foundations of Software Testing, 2013. ISBN: 9789332517660<br>
Maurício Aniche; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665780108801" title="Effective software testing (Opens in a new window)" target="_blank" >Effective software testing</a>, 2022. ISBN: 978-1-633-43993-1<br>
Paul Ammann; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990008407750108801" title="Introduction to software testing (Opens in a new window)" target="_blank" >Introduction to software testing</a>. ISBN: 978-1-107-17201-2 <br>
Mark Utting; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990005317160108801" title="Practical Model-Based Testing (Opens in a new window)" target="_blank" >Practical Model-Based Testing</a>, 2007. ISBN: 978-0-12-372501-1<br>

## Bibliografia complementar
Copeland, Lee.; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma9910245811208801" title="A practitioner.s guide to software test design / (Opens in a new window)" target="_blank" >A practitioner.s guide to software test design /</a>. ISBN: 1-58053-791-X<br>
Dorothy Graham, Rex Black, Erik van Veenendaal; <a href="https://discovery.up.pt/permalink/351PUCS_INST/1levj0s/alma990009665750108801" title="Foundations of Software Testing: ISTQB Certification (Opens in a new window)" target="_blank" >Foundations of Software Testing: ISTQB Certification</a>, 2020. ISBN: 978-1-473-76479-8<br>

## Métodos de ensino e atividades de aprendizagem
<p><span style="font-weight: 400;">This curricular unit promotes the continuous involvement of students through the study, discussion and practical application of the topics presented. In order to contribute to continuous and autonomous learning, students carry out assignments throughout the semester. In addition to these assignments, students have to carry out a project where they apply the concepts presented, in particular, different V&amp;V strategies and tools.</span></p>
<p><strong>Theoretical classes</strong><span style="font-weight: 400;"> are used to formally explain the concepts and fundamental aspects of V&amp;V. Whenever possible, theoretical concepts are accompanied by the presentation and discussion of real practical cases.<br /></span><br /><strong>Theoretical-practical classes</strong><span style="font-weight: 400;"> are used to carry out exercises, apply V&amp;V techniques, use/experiment with various testing tools and support the implementation of the final project.</span></p>

## Tipo de avaliação
Distributed evaluation with final exam

## Componentes de Ocupação
- Estudo autónomo: 100.0 hours
- Frequência das aulas: 39.0 hours
- Trabalho laboratorial: 23.0 hours
- Total:: 162.0 hours

## Fórmula de cálculo da classificação final
<p><span style="font-weight: 400;">The final ranking is calculated as follows:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">P x 40% + E x 60%</span></li>
</ul>
<br />
<p><span style="font-weight: 400;">P: project</span></p>
<p><span style="font-weight: 400;">E: final exam</span></p>

## Obtenção de frequência
<p><span style="font-weight: 400;">To successfully complete this curricular unit, students must obtain:</span></p>
<ul>
<li style="font-weight: 400;">minimum grade of 47.5% in the project (P)</li>
<li style="font-weight: 400;"><span style="font-weight: 400;">minimum grade of 47.5% in the final exam (E)</span></li>
</ul>

## Melhoria de classificação
- The grades obtained in practical work / project can be improved in the next edition of the course.<br />- The classification of the final exam can be improved in the appeal exame.

